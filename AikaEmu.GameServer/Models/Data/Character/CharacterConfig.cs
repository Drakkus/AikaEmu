// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var initialAttributes = InitialAttributes.FromJson(jsonString);

using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AikaEmu.GameServer.Models.Data.Character
{
    public partial class CharacterConfig
    {
        [JsonProperty("NameRegex")]
        public string NameRegex { get; set; }

        [JsonProperty("StartPosition")]
        public StartPosition[] StartPosition { get; set; }

        [JsonProperty("Classes")]
        public List<Class> Classes { get; set; }

        public Class GetInitial(ushort id)
        {
            foreach (var c in Classes)
            {
                if (c.ClassClass == id) return c;
            }

            return null;
        }
    }

    public partial class Class
    {
        [JsonProperty("Class")]
        public ushort ClassClass { get; set; }

        [JsonProperty("Body")]
        public byte[] Body { get; set; }

        [JsonProperty("Items")]
        public ushort[] Items { get; set; }

        [JsonProperty("Attributes")]
        public ushort[] Attributes { get; set; }

        [JsonProperty("HpMp")]
        public int[] HpMp { get; set; }
    }

    public partial class StartPosition
    {
        [JsonProperty("CoordX")]
        public float CoordX { get; set; }

        [JsonProperty("CoordY")]
        public float CoordY { get; set; }
    }

    public partial class CharacterConfig
    {
        public static CharacterConfig FromJson(string json) => JsonConvert.DeserializeObject<CharacterConfig>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CharacterConfig self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }
}